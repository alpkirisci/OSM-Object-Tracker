services:
  frontend:
    env_file:
      - .env
    build:
      context: ./frontend
      dockerfile: ./docker/prod/Dockerfile
      args:
        - NEXT_PUBLIC_API_BASE_URL=/api
    environment:
      - NEXT_PUBLIC_API_BASE_URL=/api
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app_network
    # Not exposing frontend port directly in production

  backend:
    env_file:
      - .env
    image: ${REGISTRY_URL}/${PROJECT_NAME}-backend:${TAG}
    environment:
      - DATABASE_URL=postgresql://user:password@db/osm_tracker_db
      - DEBUG=False
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app_network
    restart: unless-stopped

  test_data_source:
    image: ${REGISTRY_URL}/${PROJECT_NAME}-test_data_source:${TAG}
    environment:
      - BACKEND_URL=http://backend:8000
      - UPDATE_INTERVAL=10
      - NUM_OBJECTS=20
    ports:
      - "8001:8001"
    depends_on:
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: osm_tracker_db
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app_network

  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app_network

volumes:
  db-data:

networks:
  app_network:

